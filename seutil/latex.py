import abc
import sys
from pathlib import Path
from typing import List, Optional, Union

from . import io, log

logger = log.get_logger("latex")

__all__ = ["LatexItem", "File"]


class LatexItem:
    @abc.abstractmethod
    def to_latex(self) -> str:
        raise NotImplementedError()


class File(LatexItem):
    def __init__(
        self,
        path: Optional[Path] = None,
        auto_notice: bool = True,
        auto_insert_newline: bool = False,
    ):
        """
        Creates a latex file which holds a list of items.
        :param path: the path to use when saving the file (for backward compatibility).
        :param auto_notice: whether to automatically add a notice indicating how the file is generated.
        :param auto_insert_newline: whether to automatically insert a newline between items.
        """
        self.path: Optional[Path] = path
        self.auto_notice: bool = auto_notice
        self.auto_insert_newline = auto_insert_newline
        self.items: List[LatexItem] = []

    def to_latex(self) -> str:
        sep = "\n" if self.auto_insert_newline else ""
        return sep.join([item.to_latex() for item in self.items])

    def save(self, path: Optional[Path] = None, exists: str = "overwrite"):
        """
        Saves the file to the given path.
        :param path: the path to save the file.
        :param exists: the behavior when the file already exists:
            - overwrite: (default) overwrite the file.
            - append: append to the file.
            - error: raise an error.
        """
        if path is None:
            if self.path is None:
                raise ValueError("Path for saving the file not specified")
            path = self.path

        # the main content of the file
        s = self.to_latex()

        # add the auto notice
        if self.auto_notice:
            src = sys._getframe(1).f_code
            s = (
                f"%% Automatically generated by: {Path(src.co_filename).name} {src.co_name}\n"
                + s
            )

        # potentially deal with existing file
        if path.exists():
            if exists == "overwrite":
                logger.warning(f"Overwriting existing file at {path}")
            elif exists == "append":
                logger.info(f"Appending to existing file at {path}")
                s = io.load(path, io.Fmt.txt) + "\n" + s
            elif exists == "error":
                raise FileExistsError(f"File already exists at {path}")
            else:
                raise ValueError(f"Invalid parameter: {exists=}")
        io.dump(path, s, io.Fmt.txt)

    def append(self, item: Union[str, LatexItem], auto_newline: bool = True) -> "File":
        if isinstance(item, str):
            if auto_newline and not item.endswith("\n"):
                item += "\n"
            item = Text(item)
        self.items.append(item)
        return self

    def append_comment(self, s: str, auto_newline: bool = True) -> "File":
        if auto_newline and not s.endswith("\n"):
            s += "\n"
        return self.append(Comment(s))


class Text(LatexItem):
    def __init__(self, s: str):
        self.s = s

    def to_latex(self) -> str:
        return self.s


class Comment(LatexItem):
    def __init__(self, s: str):
        self.s = s

    def to_latex(self) -> str:
        return f"%% {self.s}"


class MacroUse(LatexItem):

    USEMACRO_COMMAND = "UseMacro"

    def __init__(self, key: str, newline: bool = False):
        self.key = key
        self.newline = newline

    def to_latex(self) -> str:
        s = "\\" + self.USEMACRO_COMMAND + "{" + self.key + "}"
        if self.newline:
            s += "\n"
        return s


class Macro(LatexItem):

    DEFMACRO_COMMAND = "DefMacro"

    def __init__(self, key: str, value: Optional[str] = None, newline: bool = True):
        self.key = key
        self.value = value
        self.newline = newline

    def use(self) -> MacroUse:
        return MacroUse(self.key)

    def to_latex(self) -> str:
        if self.value is None:
            raise ValueError(f"Macro {self.key} has no value")
        s = "\\" + self.DEFMACRO_COMMAND + "{" + self.key + "}{" + self.value + "}"
        if self.newline:
            s += "\n"
        return s
